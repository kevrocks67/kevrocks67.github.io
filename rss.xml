<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/css" href="rss.css" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">

<channel>
<title>Kevin Diaz Blog RSS Feed</title>
<description>An RSS feed for my blog about tech.</description>
<language>en-us</language>
<link>http://kevrocks67.github.io/rss.xml</link>
<atom:link href="kevrocks67.github.io/rss.xml" rel="self" type="application/rss+xml" />

<!-- LB -->

<item>
<title>Running VMware Images in QEMU</title>
<guid>kevrocks67.github.io/blog.html#running-vmware-images-in-qemu</guid>
<pubDate>Wed, 30 Jan 2019 18:30:43 EST</pubDate>
<description><![CDATA[
			<p>
	      In order to keep true to the FLOSS philosophy, I prefer to virtualize things using QEMU
        KVM.
        This also allows me to practice with the tools used in a lot of Linux environments for
        virtualization. Although it is a great tool for deploying your own virtual machines, it
        gets in the way when I want to open up a VM image for a security lab or some pre-made tool such
        as SIFT Workstation since they usually come in either virtual box or VMware images. While I
        could just download those tools, I prefer not to add more programs to my computer unless
        it is absolutely necessary. Of course, I also just like to find new ways of doing things.
        I hate seeing people online responding with "just download XYZ program and be done with
        it". Yes I can download VMware workstation if I needed it at work for something really
        quick and it will most likely work, but when it comes doing things  at home, that mindset
        is soooo boring.
			</p>
      <p>
        Normally, VMware images come in a *.ova file. The first thing to realize is that if you
        run file on the ova, you will notice that it is simply seen as a tar archive. The ova
        holds multiple files inside including the actual image, normally in a. The ova holds
        multiple files inside including the actual image, normally in a *.vmdk file, and a *.ovf
        file which is an XML file with information pertaining to the VM, comparable to the QEMU
        XML used to configure your VM settings. You may also find other files in there such as
        an ISO or a file with hashes. <b><em>The only file we care about though is the *.vmdk file as
        that is the one with the actual image.</em></b> If there are more than one, the file which
        has the name most comparable to the original *.ova filename should be the correct one. If it
        turns out this one does not work after the following process, you can always try the other one.
      </p>
      <p>
        We will be converting the vmdk to qcow2. I chose this format simply because its the one I
        use with my other images and it works well with this conversion process. To convert it,
        you need to use the qemu-img and its convert function. After this point, we will be able
        to load the qcow2 image as a regular disk image in QEMU. You can do this through
        virt-manager, virt-install or copy another VM's XML and change the source for the disk as
        well as other options like the name, the UUID, and the MAC address. Something else you can
        try for a quick test is qemu-system-x86_64 but this can sometimes be very slow unless you
        set a ton of argument options.
      </p>
      <p>
        Here are the actual steps:
        <ol>
          <li>tar -xvf original.ova</li>
          <li>qemu-img -O convert qcow2 original.vmdk original.qcow2</li>
          <li>Run the qcow2 image in QEMU</li>
          <li>If it does not boot, try the other vmdk file if there is one</li>
        </ol>
      </p>
      <p>
        As you can see, it is pretty simple to do this and so far have used it on 3 different VMware
        images flawlessly. However, you have to realize it may take some experimentation. Do not
        give up on it right away and you will be able to avoid downloading extra software and
        avoid looking for the correct free trial version or getting an expensive license.
      </p>
]]></description>
</item>


<item>
<title>Detecting The Effect Of A Phishing Attack On Your G Suite Domain</title>
<guid>kevrocks67.github.io/blog.html#detecting-the-effect-of-a-phishing-attack-on-your-gsuite-domain</guid>
<pubDate>Thu, 22 Nov 2018 19:43:14 EST</pubDate>
<description><![CDATA[
			<p>
				One of the things we have to be weary of as administrators is security. Phishing attacks are constantly becoming harder to detect and defend against. Other times, it is quite
                easy to detect. In this post I will tell you what to do when you detect a phishing attack on your domain and how to mitigate.
			</p>
            <p>
                Recently our domain received a phishing attack which told users that they had a new voicemail from someone and to click on a link to view it. When clicked, you were redirected to
                an outlook login page with your email address already entered in the username field. None of the IT department received the email, but a lot of employees did. We received a question
                about it from one employee and did not think much of it. I simply recommended that they not open it as I thought it was an isolated incident. I now realize that I should have done
                more in response. No less than an hour later, I received two more questions about the same email. Luckily, those two employees realized it looked sketchy and did not click on the
                link.
                I instantly knew that this was a phishing attack on the domain. All of the emails had
                the same sender, but slightly different subject lines so I knew that the sender was the constant I needed to use to run my audit.
            </p>
            <p>
                To run my audit, these are the steps I took:
                <ol>
                <li>Log in to G Suite dashboard</li>
                <li>Go to "Reports" tab</li>
                <li>Scroll down to the audit section on the sidebar and select "Email Log Search"</li>
                <li>Enter your desired search parameters, in this case the senders email address</li>
                <li>Select an appropriate time frame to check. I checked the last 7 days since it was recent</li>
                <li>Save the results as a google sheets file in the upper right corner and share it with your team</li>
                </ol>

                Now that we have the logs, we can start mitigating the problem. The first thing I did was to cut the head off the snake by setting a global block on the email address in the
                G Suite admin console. Afterwards, I prepared an email advising all employees of the situation, what to look for, what happens when you click on the link, and what to do if they
                have received the email. Using the logs, I was able to also individually verify with those affected if they had clicked on the link and then reset their passwords. Lastly, I was
                able to detect the time and date of incident which was actually the night before. I was not alerted to it until the next evening so it is possible that multiple people clicked on the
                link.
            </p>
            <h3>Takeaways</h3>
            <p>
                There is not a lot we can do about these attacks except deal with them after they occur. A password compromise of a super admin account via a phishing attack could be devastating
                for your domain as the attacker will have complete control over everything. This is also one of the reasons you should educate your users and administrators on the dangers of such
                attacks and how to detect them. Next time, I will be sure to run an audit as soon as I see the first message since it is so easy and quick to do. It will help me reduce the number
                of people clicking on such emails. I will also look into some possible defensive cyber education for users.
            </p>
]]></description>
</item>


<item>
<title>Using Projectors with i3wm</title>
<guid>kevrocks67.github.io/blog.html#using-projectors-with-i3wm</guid>
<pubDate>Mon, 22 Oct 2018 13:52:01 EDT</pubDate>
<description><![CDATA[
			<p>
				I use arch linux with i3-gaps on an old w520 I saved from being recycled. This computer and
                environment has truly helped me increase my efficiency. The downside, is that everything has
                to be manually configured. I do not mind this at all, however, because it has helped me
                understand how computers do certain things. If you were to just plug in the vga cord on a
                computer running i3wm, nothing would happen. You would then run xrandr to see if the vga
                connection even shows up and you will realize it has not. This is because there is no
                program running in the background to detect these display changes. You have to manually
                start the VGA output in xrandr. So, you run

                <code>xrandr --output VGA-1 --mode 1024x768</code>

                and find that now it works, but it looks really wierd. You try scaling the display and
                shifting it but find no success. Why is this?
			</p>
            <p>
                If we take a look at a windows computer, or even one running an actual DE like gnome,
                we can see that the screen resolution for both the output screen and the laptop
                display both change. In fact they set themselves to the same resolution as one another
                This seems like a simple idea, but unless you are actually
                paying attention when you plug in a vga cable, you do not really notice it. What
                I ended up doing to solve this problem was writing 2 small scripts. One I run when
                I plug in a vga output and another when I remove the vga output.

                To activate it, I use <code>xrandr --output LVDS-1-1 --mode 1024x768 --output VGA-0 --mode 1024x768</code>.
                To disable it, I use <code>xrandr --output LVDS-1-1 --mode 1920x1080 --output VGA-0 --off</code>.

                One thing I did notice is that the script for turning on the vga output will not work
                until you run xrandr on its own. It may have something with letting xrandr try and
                detect the new connection.
                There is probably a method to automate this process, but until I figure it out,
                this is what I will do. I only use vga occasionally to test projector and smartboard
                functionality after a repair.
            </p>
]]></description>
</item>




<item>
<title>First Entry</title>
<guid>kevrocks67.github.io/blog.html#first-entry</guid>
<pubDate>Sun, 21 Oct 2018 15:45:23 EDT</pubDate>
<description><![CDATA[
			<p>
				This is my first blog entry. In this blog I plan to occassionally update it with tutorials on things
                I use in my day-to-day life, have learned or practiced in my home lab. I may possibly speak my opinion
                on certain topics in technology.
			</p>
]]></description>
</item>
</channel>
</rss>

